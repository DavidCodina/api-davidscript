name: Lint & Test
on:
  # https://docs.github.com/en/actions/using-workflows
  # https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows
  # https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#pull_request

  #--------------------------------------------------------------------------
  #
  # Note:
  #
  # https://www.udemy.com/course/github-actions-the-complete-guide/learn/lecture/34138630#overview
  # Pull Request from contributors that forked will not occur automatically, but instead require approval.
  # Why? Because obviously you don't want to automatically deploy from forked users.
  # By default, pull requests based on forks do not trigger workflows.
  # First-time contributors must be approved manually. Subsequent PRs will be triggered
  # automatically. That said, if you add a collaborator and they do a first PR, it will
  # trigger automatially on the first time.
  #
  #--------------------------------------------------------------------------
  pull_request:
    branches:
      - main
      - master
      - development
      - dev
  workflow_dispatch:
env:
  #--------------------------------------------------------------------------
  #
  # Environment variables defined here are available in all jobs
  # for that workflow (unless overrided). As just alluded to, the
  # env property is also configurable at the job level (and step level).
  #
  # In order to consume the variables in this file, use $DATE, etc. (at least in Linux).
  # Can also be used in a string  "date: $DATE" or "date: ${{ env.DATE }}"
  #
  # These values are not available through process.env.XXX. However,
  # in Udemy / Academind tutorial he was demonstrating them as if they were.
  # He indicated that the variables here would be available when the application
  # runs on a runner hosted by GitHub actions. His demo was actually building the app,
  # and running it in the workflow with: npm start. Doing that is super contrived, and
  # not at all practical.
  #
  # Note GitHub Actions also has some default environment variables that it sets:
  # https://docs.github.com/en/actions/learn-github-actions/variables#default-environment-variables
  #
  # The actual way to set real env variables is through Elastic Beanstalk.
  # This can be done using the CLI: eb setenv URI=mongodb...
  # However, it may ask you to associate a branch to the environment. That's fine,
  # but I prefer to do it manually in the AWS Console. This can be found in the
  # Elastic Beanstalk --> [Enviroment] --> Configuration --> "Updates, monitoring, and logging"
  #
  #--------------------------------------------------------------------------
  DATE: 'May 25, 2023'
jobs:
  lint: # The name of job is arbitrary.
    # The actual name used here is important because it allows us to search for
    # the correct status check when Requiring status checks to pass before merging.
    # This is set up in GitHub branch --> Settings --> Branches.
    name: Lint
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x]
    steps:
      # https://github.com/marketplace/actions/checkout
      # https://github.com/actions/checkout
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      # Cache dependencies. Must be done in all jobs that install dependencies.
      # This seems to speed up the process by about 20s.
      #` https://www.udemy.com/course/github-actions-the-complete-guide/learn/lecture/34139976#overview
      #` Video 92: https://www.udemy.com/course/github-actions-the-complete-guide/learn/lecture/34140170#overview

      # - name: Cache Dependencies
      #   uses: actions/cache@v3
      #   with:
      #     path: ~/.npm
      #     key: node_modules-${{ hashFiles('**/package-lock.json') }}
      # - name: Install Dependencies
      #   run: npm ci

      - name: Cache Dependencies
        id: cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: node_modules-${{ hashFiles('**/package-lock.json') }}

      - name: Install Dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        # run: echo "node_modules was not cached. Proceeding with 'npm ci' command."
        run: npm ci

      - name: Lint src
        run: npm run lint

  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x]
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Cache Dependencies
        id: cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: node_modules-${{ hashFiles('**/package-lock.json') }}

      - name: Install Dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        # run: echo "node_modules was not cached. Proceeding with 'npm ci' command."
        run: npm ci

      # - name: Cache Dependencies
      #   uses: actions/cache@v3
      #   with:
      #     path: ~/.npm
      #     key: node_modules-${{ hashFiles('**/package-lock.json') }}
      # - name: Install Dependencies
      #   run: npm ci

      - name: Run Tests
        run: npm test
